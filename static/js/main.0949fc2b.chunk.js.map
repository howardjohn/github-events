{"version":3,"sources":["EventStream.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_callee","user","f","octokit","args","result","regenerator_default","a","wrap","_context","prev","next","Octokit","username","per_page","page","activity","listEventsForUser","sent","data","t0","stop","titleCase","s","split","map","slice","toUpperCase","toLowerCase","join","comment","body","react_default","createElement","index_es","component","style","display","color","substring","length","link","text","url","href","repo","e","name","reference","i","Fragment","title","number","html_url","EventItem","_ref","event","main","type","payload","issue","action","pull_request","p","pages","page_name","c","commits","filter","distinct","key","message","getEventText","sub","moment","created_at","fromNow","avatar","WatchLater_default","History_default","Error_default","DeviceHub_default","Notes_default","CloudUpload_default","Image_default","getEventAvatar","ListItem_default","alignItems","onClick","console","log","Avatar_default","ListItemText_default","primary","secondary","EventStream","_ref2","_useState","useState","_useState2","Object","slicedToArray","events","setEvents","useEffect","fetchEvents","List_default","width","EventStream_EventItem","styles","createStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","withStyles","props","classes","className","AppBar_default","position","Toolbar_default","IconButton_default","aria-label","Menu_default","Typography_default","variant","Button_default","container","spacing","direction","minHeight","location","pathname","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0949fc2b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport ImageIcon from '@material-ui/icons/Image';\nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\nimport HistoryIcon from '@material-ui/icons/History'\nimport ErrorIcon from '@material-ui/icons/Error'\nimport DeviceHubIcon from '@material-ui/icons/DeviceHub'\nimport NotesIcon from '@material-ui/icons/Notes'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport Octokit from '@octokit/rest';\nimport moment from 'moment';\nimport { GithubEvent, PullRequest, Issue } from './Events';\nimport { ListItemAvatar, Typography, Link } from '@material-ui/core';\n\nasync function fetchEvents(user: string, f: CallableFunction) {\n    const octokit = new Octokit()\n    const args = {\n        username: user,\n        per_page: 30,\n        page: 1\n    }\n    try {\n        const result = await octokit.activity.listEventsForUser(args)\n        f(result.data)\n    } catch {\n        f('error')\n    }\n}\n\nconst titleCase = (s: string) =>\n    s.split(' ')\n        .map(s => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())\n        .join(' ')\n\nconst comment = (body: string) => {\n    return <Typography component=\"span\" style={{ display: 'inline' }} color=\"textSecondary\">\n        {body.substring(0, 200)}{body.length > 200 ? '...' : ''}\n    </Typography>\n}\n\nconst link = (text: string | number, url: string) => {\n    return <Link href={url}>{text}</Link>\n}\n\nconst repo = (e: GithubEvent) => {\n    return link(e.repo.name, e.repo.url)\n}\n\nconst reference = (i: PullRequest | Issue) => {\n    return <>\"{i.title}\" (#{link(i.number, i.html_url)})</>\n}\n\n\nconst getEventText = (e: GithubEvent) => {\n    switch (e.type) {\n        case \"WatchEvent\":\n            return <>Started watching {repo(e)}</>\n        case \"CommitCommentEvent\":\n            return <>{repo(e)} - Commented on commit #: {comment(e.payload.comment.body)}</>\n        case \"IssueCommentEvent\":\n            return <>{repo(e)} - Commented on issue {reference(e.payload.issue)}: {comment(e.payload.comment.body)}</>\n        case \"IssuesEvent\":\n            return <>{repo(e)} - {titleCase(e.payload.action)} issue {reference(e.payload.issue)}</>\n        case \"PullRequestReviewCommentEvent\":\n            return <>{repo(e)} - Commented on pull request {reference(e.payload.pull_request)}: {comment(e.payload.comment.body)}</>\n        case \"GollumEvent\":\n            const p = e.payload.pages[0]\n            return <>{repo(e)} - {titleCase(p.action)} a wiki page \"{link(p.page_name, p.html_url)}\"</>\n        case \"PushEvent\":\n            const c = e.payload.commits\n                .filter(c => c.distinct)\n                .map((c, i) => <li key={i}>{comment(c.message)}</li>)\n            return <>{repo(e)} - Pushed {c.length} commits: <ul>{c}</ul></>\n        default: return <>{repo(e)} - {e.type}</>\n    }\n}\n\nconst getEventAvatar = (e: GithubEvent) => {\n    switch (e.type) {\n        case \"WatchEvent\": return <WatchLaterIcon />\n        case \"CommitCommentEvent\": return <HistoryIcon />\n        case \"IssueCommentEvent\":\n        case \"IssuesEvent\": return <ErrorIcon />\n        case \"PullRequestReviewCommentEvent\": return <DeviceHubIcon />\n        case \"GollumEvent\": return <NotesIcon />\n        case \"PushEvent\": return <CloudUploadIcon />\n        default: return <ImageIcon />\n    }\n}\n\nconst EventItem = ({ event }: { event: GithubEvent }) => {\n    const main = getEventText(event)\n    const sub = moment(event.created_at).fromNow()\n    const avatar = getEventAvatar(event)\n    return <ListItem alignItems=\"flex-start\" onClick={() => console.log(event)}>\n        <ListItemAvatar>\n            <Avatar>\n                {avatar}\n            </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={main} secondary={sub} />\n    </ListItem>\n}\n\nexport function EventStream({ username }: { username: string }) {\n    const [events, setEvents] = useState<Array<GithubEvent> | 'error' | 'loading'>('loading');\n\n    useEffect(() => {\n        fetchEvents(username, setEvents)\n    }, []);\n\n\n    if (events == 'loading') {\n        return <div>Loading</div>\n    } else if (events == 'error') {\n        return <div>Error</div>\n    } else {\n        return <List style={{ width: '75%' }}>\n            {events.map((e, i) => <EventItem event={e} key={i} />)}\n        </List>\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createStyles, withStyles, WithStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { EventStream } from './EventStream';\nimport { Grid } from \"@material-ui/core\";\n\n\nconst styles = createStyles({\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n});\n\nexport interface Props extends WithStyles<typeof styles> { }\n\nfunction App(props: Props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            Github Events\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n      <Grid\n        container\n        spacing={0}\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ minHeight: '100vh' }}>\n        <EventStream username={location.pathname.substring(1)}/>\n      </Grid>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n} as any;\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}